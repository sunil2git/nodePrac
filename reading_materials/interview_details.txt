# bnt mock interview Q:
array.sort
what is find and filter value
arrow function
for.. in for.. of 
on which port these micro-service are running
consul
service discovery
service is connected to consul 
active mq
put vs patch
soap vs rest
how to manage session.
redis for session 
---

how to manage session.
redis for session 
service discovery
activemq how it works
 - how one service recives a msg from another service.
service is connected to consul 
for each vs for in
node advantage on microservice
docker image created and used for deployment.
database connectivity with node.js

sql
1. index
2. types of trigger
3. rollback, commit
4. deadlock
5. Sequence
6. function
7. stored procedure
-----------------------------

1.what is advantage of node js and microservice architecture
2. how can you handle concurrent request.
3. what is the priorty of settimeout, setinterval and nextticket
4.how communicate happened between two microservice
5. eventloop
6. event queue
7. output guess: for (let i = 0; i < 5; i++) {
  setTimeout(() => console.log(i));
}
8. write code to find count of charachter in input = "aassstuvwwwwx"
9. show unique value input = "aassstuvwwwwx"
10. What is solid design principle
11. saga microservices design pattern 

--------------------------------------------------------
# Project description: 

Agora, a fintech payment solution, simplifies user onboarding through image-based KYC. Partnering with a trusted CBW bank, 
it ensures verified user KYC. The platform enables user-to-user money transfers, efficient account management, 
and serves as a reliable card provider. Agora also facilitates hassle-free bill payments, offers a convenient gift card service, 
and utilize Hawk AI for robust fraud detection, ensuring a secure financial environment.
The backend is powered by Node.js and Express framwork for server-side logic, with PostgreSQL serving as our reliable database. On the frontend, 
we've crafted user-friendly applications for both iOS and Android platforms.

Hello, I'm Sunil Kumar. I completed my master's in computer applications. I started my professional journey as a junior software developer at
Figmd,a Pune-based IT company. Currently, I am a backend developer at BNT Soft.
Throughout my career, I have gained experience in various technologies, including Spark, Spark-Scala, Kafka, Hive, Hadoop, and Scala. 
Presently, I work with a technology stack that includes Node.js, Express, and PostgreSQL
If I talk about my current project, so project name is agora

So Agora is a fintech application offering banking solutions to its users. It encompasses various features,
such as streamlined user onboarding through image-based KYC. Collaborating with a reputable CBW bank, 
it ensures verified user KYC during the onboarding process. The platform supports user-to-user and user-to-merchant money transfers, 
effective account management, and acts as a dependable card provider. Agora also simplifies bill payments, provides a convenient gift 
card service, and employs a robust fraud detection system for a secure financial environment.
All of these features are packed into beautifully crafted user-friendly apps for both iOS and Android platforms.
---------------------------------------------------------
# Agora key points:

Ariad, idology, micro-blank for kyc 
micro blink - API as well as SDK 

middesk for business
cbw API for business verify kyc

finastra is s/w where all bank are connected, via using user that data they do kyc.
-microblink extract the kyc image data and provide to cbw for kyc verify
- both peer to peer and peer to customer
- cbw also provide card  
- cbw handles payments
- igomoney used as payment gateway
- AML(anti money laudring) also added with Hawk AI
- infobip for sms alert
- firebase for push notification (from mobile side)
- mail for sftp server
- sionic for gift card

aws:
ecs to handle task defination, route53, load balancing via rules define

aogra help small scale bank and provide payment solution
ROI from the project taking charges from txn
------------------------------------------------------------------------------------------------------------
# CICD: 
Can you describe the stages of a typical CI/CD pipeline, from code commit to production deployment?
 
A typical CI/CD pipeline consists of several stages:
*Code Commit: Developers commit code changes to the version control system (e.g., Git).
*Build: The code is built, compiled, or packaged into deployable artifacts.
*Automated Testing: Various types of tests, such as unit tests, integration tests, and security scans, are performed to validate the code.
*Artifact Generation: After successful tests, artifacts are generated, versioned, and stored in an artifact repository.
*Deployment to Staging/Testing: The artifacts are deployed to a staging environment for further testing.
*Functional and Integration Testing: The application is tested in an environment that closely resembles the production environment.
*Approval Gate: Human or automated approval is often required before proceeding to production.
*Deployment to Production: If approved, the code is deployed to the production environment.
 
 
we are using Jenkins tool for implementing CICD pipeline :
Jenkins is an open-source automation server that helps automate various aspects of software development, such as building, testing, and deploying code. It allows developers to set up continuous integration and continuous delivery (CI/CD) pipelines, streamlining the development and release process.
 
 
flow of CICD pipeline:
gitlab (source code management)---->>jenkins tool (code build(create docker image as per dockerfile)->test -->deploy ) -->>docker hub/aws cloud


# AWS topics:

1. EC2
2. ecs
3. Route 53
4. Elastic Load Balancing (ELB)
5. AWS Fargate
6. Amazon CloudWatch
7. AWS IAM (Identity and Access Management)
8. AWS CloudFormation or AWS CDK (Cloud Development Kit)